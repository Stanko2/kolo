// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String        @default("password")
  name            String?
  admin           Boolean       @default(false)
  organization    Organization?
  organization_id Int?          @unique
}

model Organization {
  id                 Int                 @id @default(autoincrement())
  name               String
  ICO                String              @unique
  address            String
  description        String              @default("")
  active             Boolean             @default(true)
  invited            Boolean             @default(false)
  User               User?               @relation(fields: [userId], references: [organization_id])
  userId             Int?                @unique
  emailToken         String              @unique @default(uuid())
  email              String              @default("")
  Order              Order[]
  watchedProducts    WatchedProduct[]
  interestedProducts InterestedProduct[]
}

model Product {
  id                      Int                 @id @default(autoincrement())
  name                    String
  description             String              @default("")
  count                   Int
  weight                  Float
  Category                Category            @relation(fields: [categoryId], references: [id])
  categoryId              Int
  watchedOrganizations    WatchedProduct[]
  interestedOrganizations InterestedProduct[]
  orders                  OrderProduct[]
}

model WatchedProduct {
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  Product        Product      @relation(fields: [productId], references: [id])
  productId      Int

  @@id([organizationId, productId])
}

model InterestedProduct {
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  Product        Product      @relation(fields: [productId], references: [id])
  productId      Int

  @@id([organizationId, productId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

// enum OrderState {
//   done
//   accepted
//   sent
// }

model Order {
  id             Int            @id @default(autoincrement())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId Int
  state          String //OrderState
  date           DateTime
  pickupPlace    String
  products       OrderProduct[]
  Contract       Contract?
  Contract_id    Int?            @unique
}

model OrderProduct {
  id          Int     @id @default(autoincrement())
  product     Product @relation(fields: [productId], references:   [id])
  productId   Int
  count       Int
  description String
  accepted    Boolean
  Order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
}

model Contract {
  id      Int    @id @default(autoincrement())
  link    String
  order   Order  @relation(fields: [orderId], references: [Contract_id])
  orderId Int    @unique
}
